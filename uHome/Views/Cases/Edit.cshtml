@model uHome.Models.EditCaseViewModel

@{
    ViewBag.Title = "Edit";
}
<h2>@Model.Title</h2>

@Html.AntiForgeryToken()

<div class="container">
    <div class="btn-group" role="group">
        @Ajax.RawActionLink(
                    "<span class=\"btn btn-primary\">" + Model.StateAction + "</span>",
                    Model.StateAction,
                    "Cases",
                    new { id = Model.ID },
                    new AjaxOptions
                    {
                        OnBegin = "showSpinner",
                        OnComplete = "hideSpinner",
                        OnSuccess = "onCaseChangeStateSuccess",
                        HttpMethod = "POST"
                    }, new { id = "ChangeStateLink" })
    </div>
    <div class="row">
        <div class="col-md-9">
            <hr />
            <div class="panel panel-default">
                <div class="panel-heading">@Html.LabelFor(model => model.Description)</div>
                <div class="panel-body">@Html.DisplayFor(model => model.Description)</div>
            </div>
            <div class="panel panel-default">
                <div class="panel-heading">@Html.LabelFor(model => model.Attachments)</div>
                <div class="panel-body">
                    <div class="container" id="attachments">
                        @foreach (var attachment in Model.Attachments)
                        {
                            Html.RenderPartial("_EditAttachmentPartial", attachment);
                        }
                    </div>
                </div>
                <div class="panel-footer">
                    <div class="container">
                        <div class="row">
                            @using (Html.BeginForm("AddFiles", null, new { id = Model.ID }, FormMethod.Post, new { id = "AddFilesForm", enctype = "multipart/form-data" }))
                            {
                                <div class="form-group">
                                    @Html.LabelFor(model => model.UploadFiles, htmlAttributes: new { @class = "control-label" })
                                    <div>
                                        @Html.TextBoxFor(model => model.UploadFiles, new { type = "file", multiple = "true" })
                                    </div>
                                </div>
                                <div id="upload-btn" class="form-group">
                                    <div>
                                        <input type="submit" value="Upload" class="btn btn-default" />
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                    <div id="file-list" class="container">
                    </div>
                </div>
            </div>
            @{ Html.RenderPartial("_CommentsPartial", Model); }
        </div>
        <div class="col-md-3">
            <hr />
            <div class="panel panel-default">
                <div class="panel-heading">@Html.LabelFor(model => model.CreatedAt)</div>
                <div class="panel-body">@Html.DisplayFor(model => model.CreatedAt)</div>
            </div>
            <div class="panel panel-default">
                <div class="panel-heading">@Html.LabelFor(model => model.UpdatedAt)</div>
                <div class="panel-body" id="UpdatedAt">@Html.DisplayFor(model => model.UpdatedAt)</div>
            </div>
            <div class="panel panel-default">
                <div class="panel-heading">@Html.LabelFor(model => model.State)</div>
                <div class="panel-body" id="State">@Html.DisplayFor(model => model.State)</div>
            </div>
            <div class="panel panel-default">
                <div class="panel-heading">@Html.LabelFor(model => model.Assignee)</div>
                <div class="panel-body">@Html.DisplayFor(model => model.Assignee)</div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script type="text/javascript">
        if (window.FormData) {
            $('#upload-btn').hide();
        }

        var count = 0;

        // listen on 'ajax' event which is trigger
        $('#UploadFiles').on('ajax', function () {
            var $this = $(this);

            if (typeof this.files[count] === 'undefined')
            {
                return false;
            }

            var formData = new FormData();
            formData.append('file', this.files[count]);
            formData.append('__RequestVerificationToken', $("input[type='hidden'][name$='RequestVerificationToken']")[0].value);
            $('#file-list').append(newFileListItem(this.files[count]));
            $.ajax({
                type: "POST",
                url: "@Url.Action("AddFile", "Cases", new { id = Model.ID })",
                data: formData,
                processData: false,
                contentType: false,
                success: function (response) {
                    $('#attachments').append(response.newAttachmentRow);
                    $('#UpdatedAt').text(response.updatedAt);
                    count++;
                    $this.trigger('ajax');
                },
                xhr: function () {
                    myXhr = $.ajaxSettings.xhr();
                    if (myXhr.upload) {
                        myXhr.upload.param = count;
                        myXhr.upload.addEventListener('progress', showProgress, false);
                    } else {
                        console.log("Upload progress is not supported");
                    }

                    return myXhr;
                }
            });
        });

        $('#UploadFiles').change(function () {
            // reinitialize everything
            count = 0;
            $('#file-list').empty();
            $(this).trigger('ajax');
        });

        function newFileListItem(file) {
            var name = file.name;
            var size = file.size;

            if (size > 1024 * 1024)
            {
                size = "(" + Math.floor(size / 1024 / 1024) + "MB)";
            }
            else if (size > 1024)
            {
                size = "(" + Math.floor(size / 1024) + "KB)";
            }

            var item = "";

            item = item + "<div class=\"row\"><div class=\"col-md-8\">" +
                name + " " + size + "</div><div class=\"col-md-4\"><div class=\"progress\">" +
                "<div class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 0%;\">" +
                "</div></div></div></div>";

            return item;
        }

        function showProgress(e) {
            var i = e.target.param;
            if (e.lengthComputable) {
                var percentComplete = Math.floor((e.loaded * 100 / e.total));
                $('.progress-bar')[i].setAttribute("aria-valuenow", percentComplete);
                $('.progress-bar')[i].setAttribute("style", "width: " + percentComplete + "%;");
            }
        };

        function onAttachmentDeleteSuccess(response) {
            var id = "#attachment_" + response.id;
            $(id).remove();
            $('#UpdatedAt').text(response.updatedAt);
        }

        function onCaseChangeStateSuccess(response) {
            $('#UpdatedAt').text(response.updatedAt);
            $('#State').text(response.state);
            $('#ChangeStateLink').replaceWith(response.actionLink);
        }
    </script>
}
